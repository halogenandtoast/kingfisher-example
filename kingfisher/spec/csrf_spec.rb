require_relative "../csrf"
require_relative "../middleware"
require "rack"

RSpec.describe Kingfisher::CSRF do
  def stub_secure_random_token(token = "token")
    allow(SecureRandom).to receive(:base64) { token }
    token
  end

  def fake_env
    { "rack.session" => {}, "rack.input" => {} }
  end

  def fake_request(env = fake_env, csrf_token: nil)
    request = Rack::Request.new(env)
    request[:csrf_token] = csrf_token if csrf_token
    request
  end

  def stub_csrf(request: nil)
    csrf = described_class.new(request || fake_request)
    csrf.token # set the token
    csrf
  end

  describe "#token" do
    it "returns a token generated by SecureRandom.base64(32)" do
      token = stub_secure_random_token

      csrf = described_class.new(fake_request)

      expect(csrf.token).to eq token
    end
  end

  describe "#reset!" do
    it "deletes the token from session" do
      csrf = stub_csrf

      csrf.reset!

      expect(csrf.session.keys).not_to include(:csrf_token)
    end
  end

  describe "#safe?" do
    it "returns true when GET request" do
      csrf = stub_csrf request: fake_request(fake_env.merge("REQUEST_METHOD" => "GET"))

      expect(csrf.safe?).to be true
    end

    it "returns true when HEAD request" do
      csrf = stub_csrf request: fake_request(fake_env.merge("REQUEST_METHOD" => "HEAD"))

      expect(csrf.safe?).to be true
    end

    it "returns true when session's csrf token matches" do
      token = stub_secure_random_token

      csrf = stub_csrf request: fake_request(csrf_token: token)

      expect(csrf.safe?).to be true
    end

    it "returns true when header's HTTP_X_CSRF_TOKEN matches" do
      token = stub_secure_random_token

      csrf = stub_csrf request: fake_request(fake_env.merge("HTTP_X_CSRF_TOKEN" => token))

      expect(csrf.safe?).to be true
    end

    it "returns true when header's X_CSRF_TOKEN matches" do
      token = stub_secure_random_token

      csrf = stub_csrf request: fake_request(fake_env.merge("X_CSRF_TOKEN" => token))

      expect(csrf.safe?).to be true
    end
  end

  describe "#form_input" do
    it "returns hidden input with csrf token" do
      token = stub_secure_random_token

      csrf = stub_csrf

      expect(csrf.form_input).to eq %(<input type="hidden" name="csrf_token" value="token">)
    end
  end

  describe "#meta_tag" do
    it "returns hidden input with csrf token" do
      token = stub_secure_random_token

      csrf = stub_csrf

      expect(csrf.meta_tag).to eq %(<meta name="csrf_token" content="token">)
    end
  end
end
